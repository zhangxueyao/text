// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tccBranchFieldNames          = builder.RawFieldNames(&TccBranch{})
	tccBranchRows                = strings.Join(tccBranchFieldNames, ",")
	tccBranchRowsExpectAutoSet   = strings.Join(stringx.Remove(tccBranchFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tccBranchRowsWithPlaceHolder = strings.Join(stringx.Remove(tccBranchFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tccBranchModel interface {
		Insert(ctx context.Context, data *TccBranch) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TccBranch, error)
		FindOneByXidBranch(ctx context.Context, xid string, branch string) (*TccBranch, error)
		Update(ctx context.Context, data *TccBranch) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTccBranchModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TccBranch struct {
		Id       int64     `db:"id"`
		Xid      string    `db:"xid"`       // 全局事务ID
		Branch   string    `db:"branch"`    // 分支事务ID
		State    int64     `db:"state"`     // 状态
		Payload  string    `db:"payload"`   // 透传必要业务字段
		ExpireAt time.Time `db:"expire_at"` // TRY 过期时间（防悬挂）
	}
)

func newTccBranchModel(conn sqlx.SqlConn) *defaultTccBranchModel {
	return &defaultTccBranchModel{
		conn:  conn,
		table: "`tcc_branch`",
	}
}

func (m *defaultTccBranchModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTccBranchModel) FindOne(ctx context.Context, id int64) (*TccBranch, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tccBranchRows, m.table)
	var resp TccBranch
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTccBranchModel) FindOneByXidBranch(ctx context.Context, xid string, branch string) (*TccBranch, error) {
	var resp TccBranch
	query := fmt.Sprintf("select %s from %s where `xid` = ? and `branch` = ? limit 1", tccBranchRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, xid, branch)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTccBranchModel) Insert(ctx context.Context, data *TccBranch) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, tccBranchRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Xid, data.Branch, data.State, data.Payload, data.ExpireAt)
	return ret, err
}

func (m *defaultTccBranchModel) Update(ctx context.Context, newData *TccBranch) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tccBranchRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Xid, newData.Branch, newData.State, newData.Payload, newData.ExpireAt, newData.Id)
	return err
}

func (m *defaultTccBranchModel) tableName() string {
	return m.table
}
