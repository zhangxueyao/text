// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountFieldNames          = builder.RawFieldNames(&Account{})
	accountRows                = strings.Join(accountFieldNames, ",")
	accountRowsExpectAutoSet   = strings.Join(stringx.Remove(accountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	accountRowsWithPlaceHolder = strings.Join(stringx.Remove(accountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	accountModel interface {
		Insert(ctx context.Context, data *Account) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Account, error)
		Update(ctx context.Context, data *Account) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Account struct {
		Id           int64     `db:"id"`
		Balance      int64     `db:"balance"`       // 余额
		FreezeAmount int64     `db:"freeze_amount"` // 冻结金额
		Version      int64     `db:"version"`       // 版本号
		UpdatedAt    time.Time `db:"updated_at"`    // 更新时间
	}
)

func newAccountModel(conn sqlx.SqlConn) *defaultAccountModel {
	return &defaultAccountModel{
		conn:  conn,
		table: "`account`",
	}
}

func (m *defaultAccountModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAccountModel) FindOne(ctx context.Context, id int64) (*Account, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountRows, m.table)
	var resp Account
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountModel) Insert(ctx context.Context, data *Account) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, accountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Balance, data.FreezeAmount, data.Version)
	return ret, err
}

func (m *defaultAccountModel) Update(ctx context.Context, data *Account) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Balance, data.FreezeAmount, data.Version, data.Id)
	return err
}

func (m *defaultAccountModel) tableName() string {
	return m.table
}
