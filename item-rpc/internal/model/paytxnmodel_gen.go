// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	payTxnFieldNames          = builder.RawFieldNames(&PayTxn{})
	payTxnRows                = strings.Join(payTxnFieldNames, ",")
	payTxnRowsExpectAutoSet   = strings.Join(stringx.Remove(payTxnFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	payTxnRowsWithPlaceHolder = strings.Join(stringx.Remove(payTxnFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	payTxnModel interface {
		Insert(ctx context.Context, data *PayTxn) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PayTxn, error)
		FindOneByUserIdOrderId(ctx context.Context, userId int64, orderId int64) (*PayTxn, error)
		Update(ctx context.Context, data *PayTxn) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPayTxnModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PayTxn struct {
		Id        int64     `db:"id"`
		UserId    int64     `db:"user_id"`    // 用户ID
		OrderId   int64     `db:"order_id"`   // 订单ID
		Amount    int64     `db:"amount"`     // 金额
		Status    int64     `db:"status"`     // 状态
		CreatedAt time.Time `db:"created_at"` // 创建时间
	}
)

func newPayTxnModel(conn sqlx.SqlConn) *defaultPayTxnModel {
	return &defaultPayTxnModel{
		conn:  conn,
		table: "`pay_txn`",
	}
}

func (m *defaultPayTxnModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPayTxnModel) FindOne(ctx context.Context, id int64) (*PayTxn, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", payTxnRows, m.table)
	var resp PayTxn
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPayTxnModel) FindOneByUserIdOrderId(ctx context.Context, userId int64, orderId int64) (*PayTxn, error) {
	var resp PayTxn
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `order_id` = ? limit 1", payTxnRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, orderId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPayTxnModel) Insert(ctx context.Context, data *PayTxn) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, payTxnRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrderId, data.Amount, data.Status)
	return ret, err
}

func (m *defaultPayTxnModel) Update(ctx context.Context, newData *PayTxn) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, payTxnRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.OrderId, newData.Amount, newData.Status, newData.Id)
	return err
}

func (m *defaultPayTxnModel) tableName() string {
	return m.table
}
